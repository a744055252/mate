package com.cnsmash.service.impl;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.cnsmash.exception.CodeException;import com.cnsmash.exception.ErrorCode;import com.cnsmash.mapper.UploadFileMapper;import com.cnsmash.pojo.entity.UploadFile;import com.cnsmash.service.FileService;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.apache.commons.lang3.time.DateFormatUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.core.io.Resource;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;import java.io.File;import java.io.IOException;import java.sql.Timestamp;import java.time.LocalDateTime;import java.util.List;/** * @author liguanhuan */@Service@Slf4jpublic class FileServiceImpl implements FileService {    @Value("${file.rootPath}")    private String rootPath;    private static final String FILE_PATH = "file";    /** 默认文件 */    private static final UploadFile DEFAULT_FILE;    @Autowired    private UploadFileMapper uploadFileMapper;    static {        Timestamp now = Timestamp.valueOf(LocalDateTime.now());        DEFAULT_FILE = new UploadFile();        DEFAULT_FILE.setFileName("");        DEFAULT_FILE.setPath("");        DEFAULT_FILE.setSrc("");        DEFAULT_FILE.setRealName("");        DEFAULT_FILE.setCreateTime(now);        DEFAULT_FILE.setUpdateTime(now);    }    @Override    public Long upload(MultipartFile file) {        Timestamp now = Timestamp.valueOf(LocalDateTime.now());        Resource resource = file.getResource();        String fileName = resource.getFilename();        if (fileName == null) {            throw new CodeException(ErrorCode.FILE_NAME_ERROR, "文件名错误");        }        String fileSuffix = getFileSuffix(fileName);        String dateStr = DateFormatUtils.format(now, "yyyyMM");        String realName = "" + System.currentTimeMillis();        if (!StringUtils.isBlank(fileSuffix)) {            realName = realName + "." + fileSuffix;        }        String filePath = rootPath  + File.separator + dateStr;        File dir = new File(filePath);        if (!dir.exists()) {            boolean mkdirs = dir.mkdirs();            if (!mkdirs) {                log.info("创建文件夹失败！");                throw new CodeException(ErrorCode.CREATE_FILE_ERROR, "创建文件夹失败！");            }        }        String totalPath = filePath + File.separator + realName;        try {            file.transferTo(new File(totalPath));        } catch (IOException e) {            log.error("文件保存异常:" + totalPath, e);            throw new CodeException(ErrorCode.SAVE_FILE_ERROR, "创建文件夹失败！");        }        String src = File.separator + FILE_PATH + File.separator + dateStr + File.separator + realName;        log.info("上传文件{}", totalPath);        // 保存文件路径        UploadFile uploadFile = new UploadFile();        uploadFile.setFileName(fileName);        uploadFile.setPath(totalPath);        uploadFile.setRealName(realName);        uploadFile.setSrc(src);        uploadFile.setCreateTime(now);        uploadFile.setUpdateTime(now);        uploadFileMapper.insert(uploadFile);        log.info("保存文件{}路径[{}]", uploadFile.getId(), uploadFile.getPath());        return uploadFile.getId();    }    private static String getFileSuffix(String name){        int index = name.indexOf(".");        if (index == -1) {            return "";        }        return name.substring(index + 1);    }    @Override    public UploadFile findById(Long id) {        if (id == null) {            return null;        }        if (id == 0) {            return DEFAULT_FILE;        }        UploadFile uploadFile = uploadFileMapper.selectById(id);        if (uploadFile == null) {            uploadFile = DEFAULT_FILE;        }        return uploadFile;    }    @Override    public List<UploadFile> list(List<Long> ids) {        QueryWrapper<UploadFile> queryWrapper = new QueryWrapper<>();        queryWrapper.in("id", ids);        return uploadFileMapper.selectList(queryWrapper);    }}